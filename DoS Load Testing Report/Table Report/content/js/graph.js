/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4109.0, "minX": 0.0, "maxY": 72936.0, "series": [{"data": [[0.0, 4109.0], [0.1, 4109.0], [0.2, 4986.0], [0.3, 5024.0], [0.4, 5024.0], [0.5, 6041.0], [0.6, 6124.0], [0.7, 6124.0], [0.8, 6177.0], [0.9, 6237.0], [1.0, 6237.0], [1.1, 6257.0], [1.2, 6267.0], [1.3, 6267.0], [1.4, 6308.0], [1.5, 6402.0], [1.6, 6402.0], [1.7, 6425.0], [1.8, 6435.0], [1.9, 6435.0], [2.0, 6626.0], [2.1, 6632.0], [2.2, 6632.0], [2.3, 6682.0], [2.4, 6690.0], [2.5, 6723.0], [2.6, 6723.0], [2.7, 6732.0], [2.8, 6741.0], [2.9, 6741.0], [3.0, 7050.0], [3.1, 7622.0], [3.2, 7622.0], [3.3, 7721.0], [3.4, 7769.0], [3.5, 7769.0], [3.6, 7791.0], [3.7, 8056.0], [3.8, 8056.0], [3.9, 8144.0], [4.0, 8210.0], [4.1, 8210.0], [4.2, 8301.0], [4.3, 8415.0], [4.4, 8415.0], [4.5, 8487.0], [4.6, 8549.0], [4.7, 8549.0], [4.8, 9786.0], [4.9, 10669.0], [5.0, 10669.0], [5.1, 11059.0], [5.2, 11171.0], [5.3, 11298.0], [5.4, 11298.0], [5.5, 11565.0], [5.6, 11645.0], [5.7, 11645.0], [5.8, 11818.0], [5.9, 11820.0], [6.0, 11820.0], [6.1, 11916.0], [6.2, 11959.0], [6.3, 11959.0], [6.4, 11973.0], [6.5, 12001.0], [6.6, 12001.0], [6.7, 12028.0], [6.8, 12075.0], [6.9, 12075.0], [7.0, 12101.0], [7.1, 12128.0], [7.2, 12128.0], [7.3, 12213.0], [7.4, 12225.0], [7.5, 12225.0], [7.6, 12309.0], [7.7, 12313.0], [7.8, 12314.0], [7.9, 12314.0], [8.0, 12340.0], [8.1, 12346.0], [8.2, 12346.0], [8.3, 12346.0], [8.4, 12357.0], [8.5, 12357.0], [8.6, 12379.0], [8.7, 12396.0], [8.8, 12396.0], [8.9, 12412.0], [9.0, 12458.0], [9.1, 12458.0], [9.2, 12458.0], [9.3, 12471.0], [9.4, 12471.0], [9.5, 12493.0], [9.6, 12582.0], [9.7, 12582.0], [9.8, 12614.0], [9.9, 12633.0], [10.0, 12633.0], [10.1, 12636.0], [10.2, 12654.0], [10.3, 12662.0], [10.4, 12662.0], [10.5, 12665.0], [10.6, 12666.0], [10.7, 12666.0], [10.8, 12670.0], [10.9, 12711.0], [11.0, 12711.0], [11.1, 12744.0], [11.2, 12761.0], [11.3, 12761.0], [11.4, 12788.0], [11.5, 12815.0], [11.6, 12815.0], [11.7, 12834.0], [11.8, 12852.0], [11.9, 12852.0], [12.0, 12899.0], [12.1, 13136.0], [12.2, 13136.0], [12.3, 13196.0], [12.4, 13202.0], [12.5, 13220.0], [12.6, 13220.0], [12.7, 13223.0], [12.8, 13236.0], [12.9, 13236.0], [13.0, 13243.0], [13.1, 13255.0], [13.2, 13255.0], [13.3, 13276.0], [13.4, 13309.0], [13.5, 13309.0], [13.6, 13315.0], [13.7, 13322.0], [13.8, 13322.0], [13.9, 13323.0], [14.0, 13337.0], [14.1, 13337.0], [14.2, 13344.0], [14.3, 13355.0], [14.4, 13355.0], [14.5, 13363.0], [14.6, 13369.0], [14.7, 13369.0], [14.8, 13371.0], [14.9, 13379.0], [15.0, 13393.0], [15.1, 13393.0], [15.2, 13399.0], [15.3, 13412.0], [15.4, 13412.0], [15.5, 13423.0], [15.6, 13434.0], [15.7, 13434.0], [15.8, 13439.0], [15.9, 13459.0], [16.0, 13459.0], [16.1, 13475.0], [16.2, 13484.0], [16.3, 13484.0], [16.4, 13492.0], [16.5, 13521.0], [16.6, 13521.0], [16.7, 13522.0], [16.8, 13554.0], [16.9, 13554.0], [17.0, 13556.0], [17.1, 13556.0], [17.2, 13556.0], [17.3, 13568.0], [17.4, 13633.0], [17.5, 13710.0], [17.6, 13710.0], [17.7, 13742.0], [17.8, 13762.0], [17.9, 13762.0], [18.0, 13782.0], [18.1, 13787.0], [18.2, 13787.0], [18.3, 13792.0], [18.4, 13814.0], [18.5, 13814.0], [18.6, 13816.0], [18.7, 13832.0], [18.8, 13832.0], [18.9, 13834.0], [19.0, 13834.0], [19.1, 13834.0], [19.2, 13926.0], [19.3, 13999.0], [19.4, 13999.0], [19.5, 14030.0], [19.6, 14054.0], [19.7, 14054.0], [19.8, 14083.0], [19.9, 14127.0], [20.0, 14127.0], [20.1, 14131.0], [20.2, 14146.0], [20.3, 14165.0], [20.4, 14165.0], [20.5, 14196.0], [20.6, 14206.0], [20.7, 14206.0], [20.8, 14223.0], [20.9, 14231.0], [21.0, 14231.0], [21.1, 14234.0], [21.2, 14237.0], [21.3, 14237.0], [21.4, 14263.0], [21.5, 14279.0], [21.6, 14279.0], [21.7, 14292.0], [21.8, 14292.0], [21.9, 14292.0], [22.0, 14304.0], [22.1, 14332.0], [22.2, 14332.0], [22.3, 14348.0], [22.4, 14408.0], [22.5, 14408.0], [22.6, 14419.0], [22.7, 14448.0], [22.8, 14454.0], [22.9, 14454.0], [23.0, 14466.0], [23.1, 14472.0], [23.2, 14472.0], [23.3, 14482.0], [23.4, 14490.0], [23.5, 14490.0], [23.6, 14507.0], [23.7, 14523.0], [23.8, 14523.0], [23.9, 14589.0], [24.0, 14604.0], [24.1, 14604.0], [24.2, 14702.0], [24.3, 14706.0], [24.4, 14706.0], [24.5, 14713.0], [24.6, 14737.0], [24.7, 14737.0], [24.8, 14739.0], [24.9, 14783.0], [25.0, 14783.0], [25.1, 14803.0], [25.2, 14807.0], [25.3, 14807.0], [25.4, 14807.0], [25.5, 14830.0], [25.6, 14859.0], [25.7, 14859.0], [25.8, 14904.0], [25.9, 14915.0], [26.0, 14915.0], [26.1, 14917.0], [26.2, 14958.0], [26.3, 14958.0], [26.4, 14964.0], [26.5, 14968.0], [26.6, 14968.0], [26.7, 15005.0], [26.8, 15015.0], [26.9, 15015.0], [27.0, 15015.0], [27.1, 15080.0], [27.2, 15080.0], [27.3, 15107.0], [27.4, 15111.0], [27.5, 15111.0], [27.6, 15116.0], [27.7, 15166.0], [27.8, 15177.0], [27.9, 15177.0], [28.0, 15182.0], [28.1, 15188.0], [28.2, 15188.0], [28.3, 15204.0], [28.4, 15225.0], [28.5, 15225.0], [28.6, 15234.0], [28.7, 15259.0], [28.8, 15259.0], [28.9, 15274.0], [29.0, 15288.0], [29.1, 15288.0], [29.2, 15295.0], [29.3, 15310.0], [29.4, 15310.0], [29.5, 15328.0], [29.6, 15328.0], [29.7, 15328.0], [29.8, 15332.0], [29.9, 15337.0], [30.0, 15337.0], [30.1, 15346.0], [30.2, 15419.0], [30.3, 15434.0], [30.4, 15434.0], [30.5, 15444.0], [30.6, 15457.0], [30.7, 15457.0], [30.8, 15468.0], [30.9, 15475.0], [31.0, 15475.0], [31.1, 15497.0], [31.2, 15545.0], [31.3, 15545.0], [31.4, 15564.0], [31.5, 15635.0], [31.6, 15635.0], [31.7, 15727.0], [31.8, 15736.0], [31.9, 15736.0], [32.0, 15849.0], [32.1, 15873.0], [32.2, 15873.0], [32.3, 15888.0], [32.4, 15928.0], [32.5, 15928.0], [32.6, 15928.0], [32.7, 15930.0], [32.8, 15944.0], [32.9, 15944.0], [33.0, 15977.0], [33.1, 16020.0], [33.2, 16020.0], [33.3, 16044.0], [33.4, 16106.0], [33.5, 16106.0], [33.6, 16172.0], [33.7, 16172.0], [33.8, 16172.0], [33.9, 16272.0], [34.0, 16293.0], [34.1, 16293.0], [34.2, 16303.0], [34.3, 16304.0], [34.4, 16304.0], [34.5, 16343.0], [34.6, 16407.0], [34.7, 16407.0], [34.8, 16412.0], [34.9, 16425.0], [35.0, 16425.0], [35.1, 16465.0], [35.2, 16486.0], [35.3, 16490.0], [35.4, 16490.0], [35.5, 16513.0], [35.6, 16520.0], [35.7, 16520.0], [35.8, 16546.0], [35.9, 16557.0], [36.0, 16557.0], [36.1, 16603.0], [36.2, 16614.0], [36.3, 16614.0], [36.4, 16633.0], [36.5, 16681.0], [36.6, 16681.0], [36.7, 16728.0], [36.8, 16732.0], [36.9, 16732.0], [37.0, 16737.0], [37.1, 16771.0], [37.2, 16771.0], [37.3, 16795.0], [37.4, 16797.0], [37.5, 16797.0], [37.6, 16841.0], [37.7, 16882.0], [37.8, 16907.0], [37.9, 16907.0], [38.0, 16909.0], [38.1, 16912.0], [38.2, 16912.0], [38.3, 16917.0], [38.4, 16957.0], [38.5, 16957.0], [38.6, 16965.0], [38.7, 16978.0], [38.8, 16978.0], [38.9, 16979.0], [39.0, 16981.0], [39.1, 16981.0], [39.2, 16984.0], [39.3, 17004.0], [39.4, 17004.0], [39.5, 17032.0], [39.6, 17035.0], [39.7, 17035.0], [39.8, 17059.0], [39.9, 17079.0], [40.0, 17079.0], [40.1, 17178.0], [40.2, 17182.0], [40.3, 17185.0], [40.4, 17185.0], [40.5, 17212.0], [40.6, 17215.0], [40.7, 17215.0], [40.8, 17217.0], [40.9, 17218.0], [41.0, 17218.0], [41.1, 17289.0], [41.2, 17308.0], [41.3, 17308.0], [41.4, 17314.0], [41.5, 17331.0], [41.6, 17331.0], [41.7, 17343.0], [41.8, 17345.0], [41.9, 17345.0], [42.0, 17351.0], [42.1, 17398.0], [42.2, 17398.0], [42.3, 17404.0], [42.4, 17446.0], [42.5, 17446.0], [42.6, 17458.0], [42.7, 17505.0], [42.8, 17514.0], [42.9, 17514.0], [43.0, 17528.0], [43.1, 17539.0], [43.2, 17539.0], [43.3, 17576.0], [43.4, 17602.0], [43.5, 17602.0], [43.6, 17633.0], [43.7, 17644.0], [43.8, 17644.0], [43.9, 17675.0], [44.0, 17709.0], [44.1, 17709.0], [44.2, 17722.0], [44.3, 17729.0], [44.4, 17729.0], [44.5, 17731.0], [44.6, 17779.0], [44.7, 17779.0], [44.8, 17819.0], [44.9, 17835.0], [45.0, 17835.0], [45.1, 17843.0], [45.2, 17852.0], [45.3, 17871.0], [45.4, 17871.0], [45.5, 17883.0], [45.6, 17922.0], [45.7, 17922.0], [45.8, 17929.0], [45.9, 17997.0], [46.0, 17997.0], [46.1, 18020.0], [46.2, 18035.0], [46.3, 18035.0], [46.4, 18067.0], [46.5, 18082.0], [46.6, 18082.0], [46.7, 18084.0], [46.8, 18114.0], [46.9, 18114.0], [47.0, 18157.0], [47.1, 18171.0], [47.2, 18171.0], [47.3, 18201.0], [47.4, 18221.0], [47.5, 18221.0], [47.6, 18259.0], [47.7, 18290.0], [47.8, 18307.0], [47.9, 18307.0], [48.0, 18310.0], [48.1, 18351.0], [48.2, 18351.0], [48.3, 18361.0], [48.4, 18362.0], [48.5, 18362.0], [48.6, 18411.0], [48.7, 18430.0], [48.8, 18430.0], [48.9, 18488.0], [49.0, 18501.0], [49.1, 18501.0], [49.2, 18505.0], [49.3, 18507.0], [49.4, 18507.0], [49.5, 18517.0], [49.6, 18587.0], [49.7, 18587.0], [49.8, 18605.0], [49.9, 18635.0], [50.0, 18635.0], [50.1, 18639.0], [50.2, 18659.0], [50.3, 18660.0], [50.4, 18660.0], [50.5, 18707.0], [50.6, 18736.0], [50.7, 18736.0], [50.8, 18778.0], [50.9, 18970.0], [51.0, 18970.0], [51.1, 19281.0], [51.2, 19314.0], [51.3, 19314.0], [51.4, 19344.0], [51.5, 19368.0], [51.6, 19368.0], [51.7, 19409.0], [51.8, 19415.0], [51.9, 19415.0], [52.0, 19436.0], [52.1, 19441.0], [52.2, 19441.0], [52.3, 19468.0], [52.4, 19473.0], [52.5, 19473.0], [52.6, 19480.0], [52.7, 19502.0], [52.8, 19573.0], [52.9, 19573.0], [53.0, 19692.0], [53.1, 19693.0], [53.2, 19693.0], [53.3, 19702.0], [53.4, 19708.0], [53.5, 19708.0], [53.6, 19756.0], [53.7, 19764.0], [53.8, 19764.0], [53.9, 19774.0], [54.0, 19831.0], [54.1, 19831.0], [54.2, 19849.0], [54.3, 19887.0], [54.4, 19887.0], [54.5, 19984.0], [54.6, 20028.0], [54.7, 20028.0], [54.8, 20068.0], [54.9, 20080.0], [55.0, 20080.0], [55.1, 20144.0], [55.2, 20175.0], [55.3, 20181.0], [55.4, 20181.0], [55.5, 20190.0], [55.6, 20232.0], [55.7, 20232.0], [55.8, 20302.0], [55.9, 20326.0], [56.0, 20326.0], [56.1, 20368.0], [56.2, 20382.0], [56.3, 20382.0], [56.4, 20489.0], [56.5, 20504.0], [56.6, 20504.0], [56.7, 20508.0], [56.8, 20617.0], [56.9, 20617.0], [57.0, 20634.0], [57.1, 20638.0], [57.2, 20638.0], [57.3, 20764.0], [57.4, 20766.0], [57.5, 20766.0], [57.6, 20876.0], [57.7, 21260.0], [57.8, 21298.0], [57.9, 21298.0], [58.0, 21543.0], [58.1, 21559.0], [58.2, 21559.0], [58.3, 21671.0], [58.4, 21855.0], [58.5, 21855.0], [58.6, 21912.0], [58.7, 21967.0], [58.8, 21967.0], [58.9, 22037.0], [59.0, 22242.0], [59.1, 22242.0], [59.2, 22245.0], [59.3, 22509.0], [59.4, 22509.0], [59.5, 22545.0], [59.6, 22566.0], [59.7, 22566.0], [59.8, 22694.0], [59.9, 22702.0], [60.0, 22702.0], [60.1, 22960.0], [60.2, 23049.0], [60.3, 23291.0], [60.4, 23291.0], [60.5, 23414.0], [60.6, 23591.0], [60.7, 23591.0], [60.8, 23647.0], [60.9, 23921.0], [61.0, 23921.0], [61.1, 24070.0], [61.2, 24247.0], [61.3, 24247.0], [61.4, 24268.0], [61.5, 24293.0], [61.6, 24293.0], [61.7, 24486.0], [61.8, 24496.0], [61.9, 24496.0], [62.0, 24531.0], [62.1, 24711.0], [62.2, 24711.0], [62.3, 24728.0], [62.4, 24768.0], [62.5, 24768.0], [62.6, 24929.0], [62.7, 25080.0], [62.8, 25133.0], [62.9, 25133.0], [63.0, 25148.0], [63.1, 25327.0], [63.2, 25327.0], [63.3, 25492.0], [63.4, 25638.0], [63.5, 25638.0], [63.6, 25673.0], [63.7, 25751.0], [63.8, 25751.0], [63.9, 25821.0], [64.0, 26178.0], [64.1, 26178.0], [64.2, 26221.0], [64.3, 26406.0], [64.4, 26406.0], [64.5, 26465.0], [64.6, 26534.0], [64.7, 26534.0], [64.8, 26970.0], [64.9, 27144.0], [65.0, 27144.0], [65.1, 27465.0], [65.2, 27772.0], [65.3, 27873.0], [65.4, 27873.0], [65.5, 28023.0], [65.6, 28083.0], [65.7, 28083.0], [65.8, 28217.0], [65.9, 28283.0], [66.0, 28283.0], [66.1, 28305.0], [66.2, 28323.0], [66.3, 28323.0], [66.4, 28338.0], [66.5, 28371.0], [66.6, 28371.0], [66.7, 28406.0], [66.8, 28535.0], [66.9, 28535.0], [67.0, 28539.0], [67.1, 28830.0], [67.2, 28830.0], [67.3, 29370.0], [67.4, 29429.0], [67.5, 29429.0], [67.6, 29468.0], [67.7, 29922.0], [67.8, 30348.0], [67.9, 30348.0], [68.0, 30429.0], [68.1, 30462.0], [68.2, 30462.0], [68.3, 30512.0], [68.4, 30529.0], [68.5, 30529.0], [68.6, 30570.0], [68.7, 30616.0], [68.8, 30616.0], [68.9, 30622.0], [69.0, 30723.0], [69.1, 30723.0], [69.2, 30737.0], [69.3, 30968.0], [69.4, 30968.0], [69.5, 31052.0], [69.6, 31281.0], [69.7, 31281.0], [69.8, 31370.0], [69.9, 31507.0], [70.0, 31507.0], [70.1, 31731.0], [70.2, 31909.0], [70.3, 31962.0], [70.4, 31962.0], [70.5, 32001.0], [70.6, 32007.0], [70.7, 32007.0], [70.8, 32063.0], [70.9, 32235.0], [71.0, 32235.0], [71.1, 32239.0], [71.2, 32298.0], [71.3, 32298.0], [71.4, 32306.0], [71.5, 32315.0], [71.6, 32315.0], [71.7, 32956.0], [71.8, 33463.0], [71.9, 33463.0], [72.0, 34435.0], [72.1, 34700.0], [72.2, 34700.0], [72.3, 35178.0], [72.4, 35312.0], [72.5, 35312.0], [72.6, 35460.0], [72.7, 36755.0], [72.8, 36868.0], [72.9, 36868.0], [73.0, 37090.0], [73.1, 37107.0], [73.2, 37107.0], [73.3, 37619.0], [73.4, 37625.0], [73.5, 37625.0], [73.6, 38202.0], [73.7, 38460.0], [73.8, 38460.0], [73.9, 38718.0], [74.0, 39466.0], [74.1, 39466.0], [74.2, 39619.0], [74.3, 40040.0], [74.4, 40040.0], [74.5, 40239.0], [74.6, 40434.0], [74.7, 40434.0], [74.8, 41076.0], [74.9, 42166.0], [75.0, 42257.0], [75.1, 42257.0], [75.2, 43102.0], [75.3, 43726.0], [75.4, 43726.0], [75.5, 43781.0], [75.6, 43843.0], [75.7, 43843.0], [75.8, 44306.0], [75.9, 44785.0], [76.0, 44785.0], [76.1, 45036.0], [76.2, 45620.0], [76.3, 45620.0], [76.4, 45632.0], [76.5, 45679.0], [76.6, 45679.0], [76.7, 45756.0], [76.8, 45790.0], [76.9, 45790.0], [77.0, 45872.0], [77.1, 45883.0], [77.2, 45883.0], [77.3, 46282.0], [77.4, 46318.0], [77.5, 46355.0], [77.6, 46355.0], [77.7, 46817.0], [77.8, 47019.0], [77.9, 47019.0], [78.0, 47178.0], [78.1, 47228.0], [78.2, 47228.0], [78.3, 47504.0], [78.4, 47784.0], [78.5, 47784.0], [78.6, 48356.0], [78.7, 48858.0], [78.8, 48858.0], [78.9, 48861.0], [79.0, 49167.0], [79.1, 49167.0], [79.2, 49176.0], [79.3, 49202.0], [79.4, 49202.0], [79.5, 49305.0], [79.6, 49311.0], [79.7, 49311.0], [79.8, 49353.0], [79.9, 49369.0], [80.0, 49387.0], [80.1, 49387.0], [80.2, 49438.0], [80.3, 49470.0], [80.4, 49470.0], [80.5, 49534.0], [80.6, 49582.0], [80.7, 49582.0], [80.8, 49720.0], [80.9, 49810.0], [81.0, 49810.0], [81.1, 49849.0], [81.2, 49999.0], [81.3, 49999.0], [81.4, 50165.0], [81.5, 50215.0], [81.6, 50215.0], [81.7, 50564.0], [81.8, 50615.0], [81.9, 50615.0], [82.0, 50618.0], [82.1, 50625.0], [82.2, 50625.0], [82.3, 50843.0], [82.4, 50990.0], [82.5, 51178.0], [82.6, 51178.0], [82.7, 51251.0], [82.8, 51252.0], [82.9, 51252.0], [83.0, 51334.0], [83.1, 51450.0], [83.2, 51450.0], [83.3, 51506.0], [83.4, 52122.0], [83.5, 52122.0], [83.6, 52191.0], [83.7, 53210.0], [83.8, 53210.0], [83.9, 53506.0], [84.0, 53530.0], [84.1, 53530.0], [84.2, 54518.0], [84.3, 54565.0], [84.4, 54565.0], [84.5, 54578.0], [84.6, 54588.0], [84.7, 54588.0], [84.8, 54849.0], [84.9, 54865.0], [85.0, 55140.0], [85.1, 55140.0], [85.2, 55349.0], [85.3, 55356.0], [85.4, 55356.0], [85.5, 55620.0], [85.6, 55835.0], [85.7, 55835.0], [85.8, 56496.0], [85.9, 56620.0], [86.0, 56620.0], [86.1, 56696.0], [86.2, 57063.0], [86.3, 57063.0], [86.4, 57171.0], [86.5, 57185.0], [86.6, 57185.0], [86.7, 57301.0], [86.8, 57346.0], [86.9, 57346.0], [87.0, 57555.0], [87.1, 57925.0], [87.2, 57925.0], [87.3, 59097.0], [87.4, 59299.0], [87.5, 59321.0], [87.6, 59321.0], [87.7, 59349.0], [87.8, 60007.0], [87.9, 60007.0], [88.0, 60011.0], [88.1, 60012.0], [88.2, 60012.0], [88.3, 60012.0], [88.4, 60013.0], [88.5, 60013.0], [88.6, 60013.0], [88.7, 60014.0], [88.8, 60014.0], [88.9, 60015.0], [89.0, 60016.0], [89.1, 60016.0], [89.2, 60017.0], [89.3, 60043.0], [89.4, 60043.0], [89.5, 60053.0], [89.6, 60168.0], [89.7, 60168.0], [89.8, 60359.0], [89.9, 60462.0], [90.0, 60577.0], [90.1, 60577.0], [90.2, 60582.0], [90.3, 60587.0], [90.4, 60587.0], [90.5, 60591.0], [90.6, 60618.0], [90.7, 60618.0], [90.8, 60691.0], [90.9, 60696.0], [91.0, 60696.0], [91.1, 60703.0], [91.2, 60710.0], [91.3, 60710.0], [91.4, 60720.0], [91.5, 60728.0], [91.6, 60728.0], [91.7, 60738.0], [91.8, 60760.0], [91.9, 60760.0], [92.0, 60768.0], [92.1, 60773.0], [92.2, 60773.0], [92.3, 60809.0], [92.4, 60822.0], [92.5, 60824.0], [92.6, 60824.0], [92.7, 60871.0], [92.8, 60873.0], [92.9, 60873.0], [93.0, 60892.0], [93.1, 60906.0], [93.2, 60906.0], [93.3, 60922.0], [93.4, 60930.0], [93.5, 60930.0], [93.6, 60948.0], [93.7, 60950.0], [93.8, 60950.0], [93.9, 60952.0], [94.0, 60952.0], [94.1, 60952.0], [94.2, 60963.0], [94.3, 60971.0], [94.4, 60971.0], [94.5, 60982.0], [94.6, 60985.0], [94.7, 60985.0], [94.8, 60987.0], [94.9, 64746.0], [95.0, 64764.0], [95.1, 64764.0], [95.2, 64994.0], [95.3, 65208.0], [95.4, 65208.0], [95.5, 65238.0], [95.6, 65348.0], [95.7, 65348.0], [95.8, 65560.0], [95.9, 65614.0], [96.0, 65614.0], [96.1, 66512.0], [96.2, 69162.0], [96.3, 69162.0], [96.4, 69347.0], [96.5, 69423.0], [96.6, 69423.0], [96.7, 69442.0], [96.8, 69524.0], [96.9, 69524.0], [97.0, 69564.0], [97.1, 69634.0], [97.2, 69634.0], [97.3, 69699.0], [97.4, 69758.0], [97.5, 69778.0], [97.6, 69778.0], [97.7, 69886.0], [97.8, 69899.0], [97.9, 69899.0], [98.0, 69915.0], [98.1, 69932.0], [98.2, 69932.0], [98.3, 69974.0], [98.4, 69984.0], [98.5, 69984.0], [98.6, 69988.0], [98.7, 69998.0], [98.8, 69998.0], [98.9, 70138.0], [99.0, 70144.0], [99.1, 70144.0], [99.2, 70276.0], [99.3, 70290.0], [99.4, 70290.0], [99.5, 71063.0], [99.6, 71398.0], [99.7, 71398.0], [99.8, 72266.0], [99.9, 72936.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 4100.0, "maxY": 13.0, "series": [{"data": [[69100.0, 1.0], [69900.0, 6.0], [32900.0, 1.0], [35300.0, 1.0], [42100.0, 1.0], [43700.0, 2.0], [45700.0, 2.0], [47700.0, 1.0], [49300.0, 5.0], [49700.0, 1.0], [50500.0, 1.0], [50900.0, 1.0], [50100.0, 1.0], [51300.0, 1.0], [52100.0, 2.0], [54500.0, 4.0], [55300.0, 2.0], [57300.0, 2.0], [59300.0, 2.0], [60100.0, 1.0], [60900.0, 12.0], [60500.0, 4.0], [64900.0, 1.0], [65300.0, 1.0], [69800.0, 2.0], [72200.0, 1.0], [4100.0, 1.0], [66500.0, 1.0], [69700.0, 2.0], [71300.0, 1.0], [72900.0, 1.0], [4900.0, 1.0], [5000.0, 1.0], [6000.0, 1.0], [6100.0, 2.0], [6300.0, 1.0], [6200.0, 3.0], [6600.0, 4.0], [6400.0, 3.0], [6700.0, 3.0], [7000.0, 1.0], [7600.0, 1.0], [7700.0, 3.0], [8100.0, 1.0], [8000.0, 1.0], [8200.0, 1.0], [8300.0, 1.0], [8500.0, 1.0], [8400.0, 2.0], [9700.0, 1.0], [10600.0, 1.0], [11000.0, 1.0], [11100.0, 1.0], [11200.0, 1.0], [11600.0, 1.0], [11500.0, 1.0], [12200.0, 2.0], [12100.0, 2.0], [12000.0, 3.0], [11900.0, 3.0], [11800.0, 2.0], [12600.0, 8.0], [12400.0, 5.0], [12300.0, 9.0], [12500.0, 1.0], [12700.0, 4.0], [13200.0, 7.0], [12800.0, 4.0], [13300.0, 13.0], [13100.0, 2.0], [13400.0, 8.0], [13500.0, 6.0], [13700.0, 6.0], [13800.0, 5.0], [13600.0, 1.0], [14100.0, 5.0], [13900.0, 2.0], [14000.0, 3.0], [14200.0, 9.0], [14300.0, 3.0], [14400.0, 8.0], [14700.0, 6.0], [14500.0, 3.0], [14800.0, 5.0], [14600.0, 1.0], [15300.0, 6.0], [15200.0, 7.0], [15100.0, 7.0], [15000.0, 4.0], [14900.0, 6.0], [15600.0, 1.0], [15400.0, 7.0], [15700.0, 2.0], [15800.0, 3.0], [15500.0, 2.0], [16300.0, 3.0], [15900.0, 5.0], [16100.0, 3.0], [16200.0, 2.0], [16000.0, 2.0], [16600.0, 4.0], [17200.0, 5.0], [17400.0, 3.0], [16400.0, 6.0], [17000.0, 5.0], [16800.0, 2.0], [18200.0, 4.0], [18400.0, 3.0], [17600.0, 4.0], [18000.0, 5.0], [17800.0, 6.0], [18600.0, 5.0], [19400.0, 7.0], [19200.0, 1.0], [19800.0, 3.0], [20000.0, 3.0], [20400.0, 1.0], [19600.0, 2.0], [20200.0, 1.0], [20600.0, 3.0], [21200.0, 2.0], [20800.0, 1.0], [21800.0, 1.0], [22200.0, 2.0], [21600.0, 1.0], [22000.0, 1.0], [23200.0, 1.0], [22600.0, 1.0], [23000.0, 1.0], [23400.0, 1.0], [24200.0, 3.0], [24400.0, 2.0], [24000.0, 1.0], [23600.0, 1.0], [25000.0, 1.0], [25400.0, 1.0], [25600.0, 2.0], [26400.0, 2.0], [26200.0, 1.0], [25800.0, 1.0], [27400.0, 1.0], [28000.0, 2.0], [28400.0, 1.0], [28200.0, 2.0], [27800.0, 1.0], [29400.0, 2.0], [28800.0, 1.0], [30600.0, 2.0], [30400.0, 2.0], [31000.0, 1.0], [31200.0, 1.0], [32200.0, 3.0], [32000.0, 3.0], [34400.0, 1.0], [36800.0, 1.0], [37600.0, 2.0], [38400.0, 1.0], [39600.0, 1.0], [40000.0, 1.0], [40400.0, 1.0], [45600.0, 3.0], [46800.0, 1.0], [47200.0, 1.0], [48800.0, 2.0], [49200.0, 1.0], [50800.0, 1.0], [51200.0, 2.0], [53200.0, 1.0], [54800.0, 2.0], [55600.0, 1.0], [56400.0, 1.0], [59200.0, 1.0], [60000.0, 12.0], [60800.0, 6.0], [60400.0, 1.0], [65200.0, 2.0], [65600.0, 1.0], [69600.0, 2.0], [69500.0, 2.0], [34700.0, 1.0], [36700.0, 1.0], [35100.0, 1.0], [37100.0, 1.0], [38700.0, 1.0], [43100.0, 1.0], [44700.0, 1.0], [44300.0, 1.0], [47100.0, 1.0], [46300.0, 2.0], [48300.0, 1.0], [47500.0, 1.0], [49100.0, 2.0], [49900.0, 1.0], [49500.0, 2.0], [51100.0, 1.0], [51500.0, 1.0], [53500.0, 2.0], [55100.0, 1.0], [57100.0, 2.0], [57500.0, 1.0], [57900.0, 1.0], [60300.0, 1.0], [60700.0, 8.0], [64700.0, 2.0], [65500.0, 1.0], [69400.0, 2.0], [71000.0, 1.0], [70200.0, 2.0], [69300.0, 1.0], [70100.0, 2.0], [16500.0, 4.0], [17300.0, 7.0], [16900.0, 10.0], [17100.0, 3.0], [16700.0, 6.0], [17500.0, 5.0], [18300.0, 5.0], [17700.0, 5.0], [17900.0, 3.0], [18100.0, 3.0], [18900.0, 1.0], [18700.0, 3.0], [19300.0, 3.0], [18500.0, 5.0], [19700.0, 5.0], [20300.0, 4.0], [20100.0, 4.0], [19500.0, 2.0], [19900.0, 1.0], [20700.0, 2.0], [21500.0, 2.0], [20500.0, 2.0], [22500.0, 3.0], [21900.0, 2.0], [23500.0, 1.0], [22700.0, 1.0], [22900.0, 1.0], [23900.0, 1.0], [24500.0, 1.0], [24700.0, 3.0], [25100.0, 2.0], [24900.0, 1.0], [25300.0, 1.0], [25700.0, 1.0], [26100.0, 1.0], [26500.0, 1.0], [26900.0, 1.0], [27100.0, 1.0], [28300.0, 4.0], [27700.0, 1.0], [28500.0, 2.0], [29300.0, 1.0], [29900.0, 1.0], [30500.0, 3.0], [30700.0, 2.0], [30300.0, 1.0], [31300.0, 1.0], [31500.0, 1.0], [30900.0, 1.0], [31700.0, 1.0], [31900.0, 2.0], [32300.0, 2.0], [33400.0, 1.0], [35400.0, 1.0], [37000.0, 1.0], [38200.0, 1.0], [39400.0, 1.0], [40200.0, 1.0], [42200.0, 1.0], [41000.0, 1.0], [43800.0, 1.0], [45000.0, 1.0], [45800.0, 2.0], [46200.0, 1.0], [47000.0, 1.0], [50600.0, 3.0], [49800.0, 2.0], [49400.0, 2.0], [50200.0, 1.0], [51400.0, 1.0], [55800.0, 1.0], [56600.0, 2.0], [57000.0, 1.0], [59000.0, 1.0], [60600.0, 3.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 72900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 40.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 640.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 640.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 40.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 184.30450450450445, "minX": 1.72032438E12, "maxY": 339.2639999999999, "series": [{"data": [[1.72032444E12, 184.30450450450445], [1.72032438E12, 339.2639999999999]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72032444E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6124.0, "minX": 1.0, "maxY": 62811.87499999999, "series": [{"data": [[2.0, 15873.0], [3.0, 15888.0], [5.0, 6262.0], [6.0, 6237.0], [7.0, 6435.0], [8.0, 6124.0], [9.0, 6425.0], [10.0, 6308.0], [11.0, 6402.0], [12.0, 6682.0], [13.0, 6741.0], [14.0, 6632.0], [15.0, 6723.0], [16.0, 6690.0], [17.0, 6732.0], [18.0, 8056.0], [19.0, 14807.0], [20.0, 6626.0], [21.0, 14783.0], [22.0, 8487.0], [23.0, 8415.0], [25.0, 11576.5], [26.0, 7791.0], [27.0, 7721.0], [28.0, 7769.0], [29.0, 8144.0], [30.0, 7622.0], [31.0, 8301.0], [33.0, 15977.0], [32.0, 8210.0], [35.0, 16912.0], [34.0, 14702.0], [37.0, 16771.0], [36.0, 16795.0], [39.0, 13834.0], [38.0, 13816.0], [41.0, 13323.0], [40.0, 14083.0], [43.0, 14706.0], [42.0, 13792.0], [45.0, 14904.0], [44.0, 11818.0], [47.0, 13315.0], [46.0, 13999.0], [49.0, 12636.0], [48.0, 12666.0], [51.0, 12852.0], [50.0, 12662.0], [53.0, 12744.0], [52.0, 12788.0], [55.0, 12761.0], [54.0, 12225.0], [57.0, 13434.0], [56.0, 12309.0], [58.0, 13412.0], [61.0, 14415.333333333334], [63.0, 13369.0], [62.0, 14237.0], [67.0, 12670.0], [66.0, 24728.0], [65.0, 13492.0], [64.0, 14206.0], [71.0, 25532.5], [69.0, 31731.0], [68.0, 13459.0], [75.0, 12471.0], [74.0, 14482.0], [73.0, 14932.5], [79.0, 12493.0], [78.0, 12458.0], [77.0, 12412.0], [76.0, 20302.0], [83.0, 12711.0], [82.0, 36868.0], [81.0, 20232.0], [80.0, 20028.0], [87.0, 14523.0], [86.0, 14454.0], [85.0, 13202.0], [84.0, 12815.0], [91.0, 13710.0], [90.0, 59246.0], [89.0, 13832.0], [88.0, 13322.0], [95.0, 51703.33333333333], [94.0, 15116.0], [93.0, 51315.0], [92.0, 13633.0], [99.0, 15545.0], [98.0, 16407.0], [97.0, 14859.0], [96.0, 13556.0], [103.0, 13337.0], [102.0, 13236.0], [101.0, 62811.87499999999], [100.0, 16272.0], [107.0, 13521.0], [106.0, 13484.0], [105.0, 23647.0], [104.0, 13568.0], [111.0, 15015.0], [110.0, 18157.0], [109.0, 17404.0], [108.0, 17059.0], [115.0, 60017.0], [114.0, 60942.33333333333], [113.0, 14917.0], [112.0, 14958.0], [119.0, 17446.0], [118.0, 61351.333333333336], [117.0, 15259.0], [116.0, 15177.0], [123.0, 25370.25], [127.0, 44295.5], [126.0, 18931.5], [124.0, 20181.0], [135.0, 19693.0], [134.0, 20504.0], [133.0, 17004.0], [132.0, 17032.0], [131.0, 19849.0], [130.0, 32235.0], [129.0, 32298.0], [128.0, 21912.0], [143.0, 18082.0], [142.0, 16797.0], [141.0, 19692.0], [140.0, 19702.0], [139.0, 16909.0], [138.0, 17602.0], [137.0, 16957.0], [136.0, 16979.0], [151.0, 16882.0], [150.0, 48861.0], [149.0, 18084.0], [148.0, 16981.0], [147.0, 20080.0], [146.0, 17843.0], [145.0, 17871.0], [144.0, 16732.0], [159.0, 57783.50000000001], [158.0, 42346.0], [157.0, 56570.125], [156.0, 60043.0], [155.0, 60053.0], [154.0, 21543.0], [153.0, 16841.0], [152.0, 41745.0], [167.0, 50253.25], [166.0, 46623.0], [165.0, 47019.0], [164.0, 39670.5], [163.0, 59373.4], [162.0, 18507.0], [161.0, 45790.0], [160.0, 53224.5], [175.0, 58332.0], [174.0, 50120.4], [173.0, 44450.5], [172.0, 46704.666666666664], [171.0, 56661.555555555555], [170.0, 18307.0], [169.0, 18259.0], [168.0, 58989.444444444445], [183.0, 46727.0], [182.0, 15928.0], [181.0, 16044.0], [180.0, 51881.81818181819], [179.0, 49758.4], [178.0, 55096.83333333333], [177.0, 51616.4], [176.0, 17852.0], [191.0, 50789.0], [190.0, 15419.0], [189.0, 46889.0], [188.0, 15328.0], [187.0, 42743.5], [186.0, 15564.0], [185.0, 38460.0], [184.0, 26406.0], [199.0, 43969.2], [198.0, 17528.0], [197.0, 28371.0], [196.0, 24496.0], [195.0, 31962.0], [194.0, 35994.0], [193.0, 33176.0], [192.0, 32956.0], [207.0, 16614.0], [206.0, 41348.5], [205.0, 33890.5], [204.0, 48858.0], [203.0, 19756.0], [202.0, 18067.0], [201.0, 17079.0], [200.0, 42865.4], [215.0, 18430.0], [214.0, 20617.0], [213.0, 16557.0], [212.0, 17398.0], [211.0, 17351.0], [210.0, 32563.5], [209.0, 17212.0], [208.0, 40820.666666666664], [223.0, 19887.0], [222.0, 44528.555555555555], [221.0, 39298.5], [220.0, 16546.0], [219.0, 32013.5], [218.0, 32661.5], [217.0, 16520.0], [216.0, 43968.333333333336], [231.0, 27144.0], [230.0, 29554.5], [229.0, 32007.0], [228.0, 16020.0], [227.0, 16486.0], [226.0, 27873.0], [225.0, 36964.0], [224.0, 22242.0], [239.0, 27965.5], [238.0, 23049.0], [237.0, 29824.0], [236.0, 37719.6], [235.0, 38002.0], [234.0, 39225.4], [233.0, 15736.0], [232.0, 15849.0], [247.0, 27402.5], [246.0, 18114.0], [245.0, 14830.0], [244.0, 28486.5], [243.0, 15468.0], [242.0, 19415.0], [241.0, 30070.0], [240.0, 17929.0], [255.0, 34077.0], [254.0, 30067.0], [253.0, 22694.0], [252.0, 22566.0], [251.0, 30855.5], [250.0, 21967.0], [249.0, 33490.333333333336], [248.0, 17182.0], [270.0, 12028.0], [271.0, 11916.0], [269.0, 12075.0], [268.0, 13344.0], [267.0, 24595.0], [266.0, 29675.0], [265.0, 16728.0], [264.0, 19984.0], [263.0, 12582.0], [257.0, 14292.0], [256.0, 24070.0], [259.0, 34193.42857142857], [258.0, 13196.0], [262.0, 20068.0], [261.0, 12614.0], [260.0, 20368.0], [286.0, 27623.333333333332], [274.0, 10720.0], [273.0, 19480.0], [272.0, 20638.0], [275.0, 11820.0], [279.0, 26007.5], [278.0, 25821.0], [277.0, 15234.0], [276.0, 25494.5], [287.0, 16293.0], [285.0, 20764.0], [284.0, 23921.0], [283.0, 15080.0], [282.0, 13554.0], [281.0, 15107.0], [280.0, 19831.0], [302.0, 22006.5], [303.0, 21355.5], [301.0, 13309.0], [300.0, 16907.0], [299.0, 15204.0], [298.0, 25271.666666666668], [297.0, 24126.0], [296.0, 12128.0], [295.0, 13363.0], [289.0, 24335.0], [288.0, 13220.0], [291.0, 12001.0], [290.0, 11959.0], [294.0, 15015.0], [293.0, 12101.0], [292.0, 14915.0], [318.0, 12396.0], [319.0, 12340.0], [317.0, 12379.0], [316.0, 27302.6], [315.0, 13371.0], [314.0, 14472.0], [313.0, 23099.0], [312.0, 16984.0], [311.0, 13423.0], [305.0, 25172.0], [304.0, 24076.0], [307.0, 14589.0], [306.0, 16172.0], [310.0, 25324.333333333332], [309.0, 20593.5], [308.0, 13399.0], [334.0, 12665.0], [335.0, 19999.25], [333.0, 14737.0], [332.0, 23791.25], [331.0, 25222.5], [330.0, 14279.0], [329.0, 19281.0], [328.0, 13782.0], [327.0, 20989.5], [321.0, 13556.0], [320.0, 14507.0], [323.0, 12314.0], [322.0, 12313.0], [326.0, 12633.0], [325.0, 12458.0], [324.0, 12346.0], [336.0, 15443.0], [340.0, 16138.914285714287], [339.0, 23597.749999999996], [338.0, 15166.0], [337.0, 24542.5], [1.0, 15944.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[212.78970588235296, 28061.58235294118]], "isOverall": false, "label": "Home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 340.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 256.25, "minX": 1.72032438E12, "maxY": 418547.63333333336, "series": [{"data": [[1.72032444E12, 418547.63333333336], [1.72032438E12, 99835.91666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72032444E12, 1055.75], [1.72032438E12, 256.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72032444E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16920.751999999993, "minX": 1.72032438E12, "maxY": 30570.77837837835, "series": [{"data": [[1.72032444E12, 30570.77837837835], [1.72032438E12, 16920.751999999993]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72032444E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 313.7603603603604, "minX": 1.72032438E12, "maxY": 647.3679999999997, "series": [{"data": [[1.72032444E12, 313.7603603603604], [1.72032438E12, 647.3679999999997]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72032444E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 47.36576576576582, "minX": 1.72032438E12, "maxY": 90.47999999999998, "series": [{"data": [[1.72032444E12, 47.36576576576582], [1.72032438E12, 90.47999999999998]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72032444E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4109.0, "minX": 1.72032438E12, "maxY": 72936.0, "series": [{"data": [[1.72032444E12, 72936.0], [1.72032438E12, 25751.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72032444E12, 6124.0], [1.72032438E12, 4109.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72032444E12, 57231.4], [1.72032438E12, 23411.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72032444E12, 70287.76], [1.72032438E12, 25721.62]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72032444E12, 18778.0], [1.72032438E12, 17218.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72032444E12, 65260.0], [1.72032438E12, 24880.699999999997]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72032444E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6109.0, "minX": 1.0, "maxY": 69758.0, "series": [{"data": [[2.0, 6109.0], [8.0, 20435.5], [9.0, 16253.0], [10.0, 16147.5], [11.0, 18300.0], [3.0, 16978.0], [12.0, 53639.0], [13.0, 46336.5], [14.0, 16681.0], [15.0, 15013.5], [1.0, 10999.5], [4.0, 17857.0], [16.0, 41171.5], [17.0, 60710.0], [18.0, 27894.5], [19.0, 17850.5], [20.0, 14472.0], [5.0, 18084.0], [6.0, 20415.0], [24.0, 14913.5], [7.0, 23049.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[17.0, 60048.0], [9.0, 60263.5], [18.0, 60949.0], [20.0, 69758.0], [12.0, 60014.5], [14.0, 69634.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 24.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 37.0, "minX": 1.0, "maxY": 934.5, "series": [{"data": [[2.0, 110.0], [8.0, 191.0], [9.0, 92.5], [10.0, 37.0], [11.0, 304.5], [3.0, 170.0], [12.0, 421.0], [13.0, 177.5], [14.0, 76.0], [15.0, 841.0], [1.0, 144.0], [4.0, 179.5], [16.0, 135.0], [17.0, 712.0], [18.0, 62.0], [19.0, 476.0], [20.0, 90.0], [5.0, 42.0], [6.0, 786.0], [24.0, 63.0], [7.0, 62.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[17.0, 82.0], [9.0, 306.5], [18.0, 934.5], [20.0, 849.0], [12.0, 196.0], [14.0, 880.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 24.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.6, "minX": 1.72032438E12, "maxY": 7.733333333333333, "series": [{"data": [[1.72032444E12, 3.6], [1.72032438E12, 7.733333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72032444E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.72032438E12, "maxY": 8.583333333333334, "series": [{"data": [[1.72032444E12, 8.583333333333334], [1.72032438E12, 2.0833333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72032444E12, 0.6666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72032444E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.72032438E12, "maxY": 8.583333333333334, "series": [{"data": [[1.72032444E12, 8.583333333333334], [1.72032438E12, 2.0833333333333335]], "isOverall": false, "label": "Home-success", "isController": false}, {"data": [[1.72032444E12, 0.6666666666666666]], "isOverall": false, "label": "Home-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72032444E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.72032438E12, "maxY": 8.583333333333334, "series": [{"data": [[1.72032444E12, 8.583333333333334], [1.72032438E12, 2.0833333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72032444E12, 0.6666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72032444E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

